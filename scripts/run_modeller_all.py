#!/usr/bin/env python

"""
Preparing template and the model for modelling, then performing the modelling by Modeller using restraints.

Usage: python run_modeller.py <File with model's PDB IDs> <File path to main folder>

Example:  /home/lixue/tools/anaconda3/bin/python3 /home/fmeiman/tools/modeller/run_modeller_all.py /home/fmeiman/mhc_pept_mutations/modeller/MHCI/DOPE_2_10/modelling_file_table1.csv /home/fmeiman/mhc_pept_mutations/modeller/MHCI/DOPE_2_10

Author: {0} ({1})
"""

import sys
import os.path
import re
import subprocess
import get_modeller_results

__author__ = "Farzaneh Meimandi Parizi"
__email__ = "farzanemeimandi@gmail.com"

USAGE = __doc__.format(__author__, __email__)

def check_input(args):
    """Checks whether proper input is provided"""
    if len(args) != 2:
        sys.stderr.write(USAGE)
        sys.exit(1)
    elif len(args) == 2:
        if os.path.isfile(args[0]):
            modelling_file = open(args[0], 'r')
            central_directory = args[1]
            return(modelling_file, central_directory)

def modelling_processor(input_line, central_dir, table1_modelled_Scores):
    """
    Calls several functions:
    > Function that creates subdirectories in the central directory, in which subsequent modelling will take place.
    """
    args = input_line.strip().replace(' ', '').split(';') # Remove spaces, newlines and separate variables.
    if len(args) == 5:
        templ_ID, templ_seq, targ_seq, targ_ID, interface_cutoff= args
        model_dir = templ_ID + "_" + targ_ID
        print(model_dir)
         # Create directories and store the returned directory where the modelling will take place.
        model_dir, run_name = create_directories(central_dir, templ_ID, targ_ID) # This function returns the path to the mutation directory and the run_name.

       # Generate the files for modelling including restraint files
        prepare_modelling(templ_ID,  targ_ID, model_dir, interface_cutoff) # FIX THE OUTPUT OF THIS!!!!!!

        # Running MODELLER software for this model
        run_MODELLER( templ_ID, targ_ID)

        # Gather all results generated by modelling
        get_results(templ_ID , targ_ID, table1_modelled_Scores)


    else:
        sys.stderr.write(USAGE)
        sys.exit(1)


def shell_run(cmd, outputf):
    with open(outputf, "w") as f:
        process = subprocess.Popen(cmd.split(), shell = False, stdout = f)
        process.wait()


def create_directories(central_dir, templ_file, targ_ID ):
    templ_ID = templ_file[0:4]
    # Model directory name.
    run_name = templ_ID + "_" + targ_ID
    #print(run_name)

    # Creation of directories.
    bashCommand = "bash /home/fmeiman/tools/modeller/create_modeling_dir.sh " + central_dir + " " + run_name + " "  + templ_ID + " " + targ_ID
    #print(bashCommand)
    # Run the bash command.
    process = subprocess.run(bashCommand, shell = True, stdout=subprocess.PIPE)
    # Capture the path to the folder with the model file.
    bash_output = process.stdout.decode('utf-8')
    path_parts = bash_output.split('The environment is ready for adding restraints for modelling!') # Split on the second-last output from the run_modeller.sh file.
    # Get the path.

    model_dir = path_parts[-1].strip() # Make sure the newline characters are removed from the path!
    return(model_dir, run_name)

def prepare_modelling(templ_ID, targ_ID,  model_dir, interface_cutoff):
    """Create the required files for modelling"""
    # Call the prepare_modelling.sh script.
    bashCommand = "bash /home/fmeiman/tools/modeller/prepare_modelling.sh " + templ_ID + " " +  targ_ID + " " + model_dir + " " + interface_cutoff
    process = subprocess.run(bashCommand, shell = True,stdout=subprocess.PIPE)


def run_MODELLER( templ_ID, targ_ID):

    run_name = templ_ID + "_" + targ_ID

    os.chdir(run_name)

    bashCommand = "bash run_file.sh" + " " + run_name
    #SOAP scoring
#    bashCommand = "mod9.22 cmd_modeller_soap.py >& result_file.out"
    process = subprocess.run(bashCommand, shell = True, stdout=subprocess.PIPE)

    os.chdir('../')

def get_results( templ_ID, targ_ID, table1_modelled_Scores):

    run_name = templ_ID + "_" + targ_ID

    os.chdir(run_name)

    get_modeller_results.loop_DOPE_scores('result_file.out', table1_modelled_Scores, templ_ID, targ_ID)

#    get_modeller_results.loop_SOAP_scores('cmd_modeller_soap.log' , table1_modelled_Scores, templ_ID, targ_ID)

    os.chdir('../')


if '__name__ == __main__':
    # Check input
    modelNames_file, central_directory= check_input(sys.argv[1:])

    try:
         os.remove('modeller_results_table1.out')
    except:
         print("Error while deleting file ", os.getcwd())
    table1_modelled_Scores = open('modeller_results_table1.out','a')


    for line in modelNames_file:
        modelling_processor(line, central_directory, table1_modelled_Scores )

#    bashCommand = "bash /home/fmeiman/tools/modeller/refine_modeller_files.sh "
#    process = subprocess.run(bashCommand, shell = True,stdout=subprocess.PIPE)

modelNames_file.close()
